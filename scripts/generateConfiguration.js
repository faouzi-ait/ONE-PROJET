/*
to run:
      node ./scripts/generateConfiguration.js
  Parameters:
    <config name>: 'features' | 'localisation | styles | images'
    <api url> : string (optional - defaults to demo)
    <api key> : string (optional - defaults to demo)
*/
const commentBlock = `/*\n
  DO NOT EDIT THIS FILE - IT IS GENERATED FROM THE API\n\n
  scripts/generateConfiguration.js\n\n
  ANY EDIT'S WILL BE OVER WRITTEN IF REGENERATED\n\n
  DO NOT EDIT THIS FILE - IT IS GENERATED FROM THE API\n\n*/\n
`

const clientApiKeyOverrides = {
  ae: 'aenetworks-web',
  rtv: 'onetv-web'
}

const clientApiOverride = {
  rtv: 'lite',
}

const path = require('path')
const fs = require('fs')
const upperFirst = require('lodash/upperFirst')
const camelCase = require('lodash/camelCase')
const pluralize = require('pluralize')
const axios = require('axios')
const capitalize = require('lodash/capitalize')

const configName = process.argv[2]
const branch = process.argv[3] === 'production' ? '' : '.staging'
const client = process.argv[4] ? process.argv[4] : 'demo'
const clientApiName = clientApiOverride[client] || client
const apiUrl = `https://api-${clientApiName}${branch}.rawnet.one`
const apiKey = process.env.npm_config_api_key || clientApiKeyOverrides[client] || `${client}-web`

const configSchemas = ['features', 'localisation', 'styles']

if (configName !== 'all' && !configSchemas.includes(configName)) {
  console.log('\033[0;31m' + `Must provide config type ( all | ${configSchemas.join(' | ')} )`)
  return
}

const generatedLog = (text) => {
  console.log('\033[0;34m [ generated ] \033[0m' +  text + '\n')
}

const generateConfigurationFiles = async (configType) => {
  const fileNameDefaultConfig = `default-api-${configType}`
  const fileNameTypescriptTypes = `Api${capitalize(configType)}Type`

  const generateTypes = (schema) => {
    const formatTypeName = string =>
      `${pluralize.singular(upperFirst(camelCase(string)))}Type`

    const generatedLines = []

    const createType = (properties, name = `Api${upperFirst(configType)}`, parent) => {
      const typeLines = Object.keys(properties).map((key) => {

        if (properties[key] && properties[key].type === 'object') {
          if (properties[key].properties) {
            createType(properties[key].properties, !parent ? key : `${parent}${upperFirst(key)}`, key)
            return `${camelCase(key)}: ${!parent ? formatTypeName(key) : formatTypeName(`${parent}${upperFirst(key)}`)}`
          } else {
            return `${camelCase(key)}: any`
          }
        } else if (properties[key].type === 'array') {
          const items = properties[key].items
          if (items && items.type) {
            if (typeof items.type === 'object' && items.type[0]) {
              createType(items.type[0].properties, key)
              return `${camelCase(key)}: ${formatTypeName(key)}[]`
            } else {
              return `${camelCase(key)}: any[]`
            }
          }
          return `${camelCase(key)}: any`
        }
        let type = properties[key].type

        if (typeof type === 'object') {
          if (Array.isArray(type)) {
            type = type.join(' | ')
          } else if (type.enum) {
            type = type.enum.map((value) => `'${value}'`).join(' | ')
          }
        }
        return `${camelCase(key)}: ${type}`
      })

      generatedLines.push(
        `export interface ${formatTypeName(name)} {`,
          ...typeLines.map(line => `  ${line}`),
        `};`,
        '',
      )
    }
    createType(schema.properties)

    fs.writeFileSync(
      path.resolve(__dirname, `../src/javascript/utils/theme/types/${fileNameTypescriptTypes}.ts`),
      commentBlock + generatedLines.join('\n'),
    )
    generatedLog(`TypeScript types for ${configType}`)
  }

  const addIndent = (str, indent) => {
    const padding = Array(indent).fill(' ').join('')
    return padding + str
  }

  const generateDefaultConfig = (schema) => {
    const createNesting = (properties, name, indent = 2) => {
      const configLines = Object.keys(properties || {}).map((key) => {
        if (properties[key].type === 'object') {
          return createNesting(properties[key].properties, key, indent + 2).join('\n')
        } else if (Array.isArray(properties[key].default)) {
          return `${camelCase(key)}: [${properties[key].default.map((value) => {
            if (typeof value === 'string') {
              return `\n${addIndent(`'${value}'`, indent + 2)}`
            }
            return `\n${addIndent(value, indent + 2)}`
          })}\n${addIndent('],', indent)}`
        }
        const value = typeof properties[key].default === 'string' ? `'${properties[key].default}'` : properties[key].default
        return `${camelCase(key)}: ${value},`
      })
      if (name) {
        return [
          `${camelCase(name)}: {`,
          ...configLines.map(line => addIndent(line, indent)),
          addIndent('},', indent - 2)
        ]
      }
      return configLines.map(line => addIndent(line, indent))
    }

    const typescriptType =  `Api${capitalize(pluralize.singular(configType))}Type`
    const generatedLines = [
      `import { ${typescriptType} } from 'javascript/utils/theme/types/${fileNameTypescriptTypes}'`,
      '',
      `const ${camelCase(fileNameDefaultConfig)}: ${typescriptType} =  {`,
    ].concat(createNesting(schema.properties), [
      '}',
      '',
      `export default ${camelCase(fileNameDefaultConfig)}`,
    ])


    fs.writeFileSync(
      path.resolve(__dirname, `../src/javascript/config/${fileNameDefaultConfig}.ts`),
      commentBlock + generatedLines.join('\n'),
    )
    generatedLog(`"default-api-${configType}"`)
  }



  await axios(`${apiUrl}/configuration/${configType}/schema`, {
    method: 'GET',
    headers: {
      'API-Version': 1,
      'Accept': 'application/vnd.api+json',
      'X-Web-Api-Key': apiKey
    }
  })
    .then((response) => {
      const schema = response.data
      generateTypes(schema)
      generateDefaultConfig(schema)
    })
    .catch((err) => {
      console.log('\033[0;31m Error fething schemas: ', err)
      console.log('\033[0;31m Error Error Error - See logs above!!')
    })
}

let filesToGenerate = []
if (configName === 'all') {
  filesToGenerate = [...configSchemas]
} else {
  filesToGenerate.push(configName)
}

Promise.all(filesToGenerate.map(generateConfigurationFiles)).then(() => {
  process.exit(0)
}).catch((e) => {
  console.error(e)
  process.exit(1)
})