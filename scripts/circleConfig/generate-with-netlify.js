/*
This is a TEMPORARY file used to generate a hybrid version of .circleci/config.yml
This version will still use a script to deploy our staging branch to netlify.
This allows us to bring in the new configuration and build process into our current build cycle prior to moving away from netlify.

Once we have migrated away from netlify the following files should be deleted from the repo (including this file):
./scripts/circleConfig/generate-with-netlify.js
./scripts/deployToNetlify.js
./scripts/deployToNetlifyProduction.js

after which circleci/config.yml should be regenerated using: node ./scripts/circleConfig/generate.js

to run:
      node ./scripts/circleConfig/generate-with-netlify.js
*/

const path = require('path')
const fs = require('fs')

const commentBlock = `#\n#
#  DO NOT EDIT THIS FILE - IT IS GENERATED FROM ./scripts/circleConfig/generate-with-netlify.js\n#\n#
#  ANY EDIT'S WILL BE OVER WRITTEN IF/WHEN REGENERATED\n#\n#
#  DO NOT EDIT THIS FILE - IT IS GENERATED FROM ./scripts/circleConfig/generate-with-netlify.js\n#\n\n
`

const clientList = [
  'ae',
  'all3',
  'amc',
  'banijaygroup',
  'cineflix',
  'demo',
  'discovery',
  'drg',
  'endeavor',
  'fremantle',
  'itv',
  'keshet',
  'rtv',
  'storylab',
  'wildbrain',
]

const injectCircleCiEnvVariables = (client) => {
  const clientName = client.toUpperCase()
  return [
    'EMAIL_ADDRESS',
    'PASSWORD',
    'API_KEY',
    'OKTA_USERNAME',
    'OKTA_PASSWORD',
  ].map((varName) => [
    `      - run:`,
    `          name: Create Cypress Env - ${varName}`,
    `          command: echo "export CYPRESS_${varName}=$${clientName}_${varName}" >> $BASH_ENV`,
  ].join('\n'))
}

const generateClientJobs = () => {
  return clientList.reduce((acc, client) => {
    let clientJobs = [
      ...acc,
      '',
      `  ${client}_all_branches:`,
      '    <<: *docker_image',
      '    <<: *run_unit_tests',
      '',
      `  ${client}_staging:`,
      '    <<: *docker_image',
      '    <<: *run_staging',
      '',
      `  ${client}_releases:`,
      '    <<: *docker_image',
      '    steps:',
      ...injectCircleCiEnvVariables(client),
      '      - <<: *run_complete_tests',

    ]
    if (client !== 'rtv') {
      clientJobs = [
        ...clientJobs,
        '',
        `  ${client}_master:`,
        '    <<: *docker_image',
        '    steps:',
        ...injectCircleCiEnvVariables(client),
        '      - <<: *run_master',
        '',
      ]
    }
    return clientJobs
  }, []).join('\n')
}

const generateClientWorkflows = () => {
  return clientList.reduce((acc, client) => {
    let workflows = [
      ...acc,
      '',
      `      - ${client}_all_branches:`,
      '          <<: *requires_image',
      '          <<: *all_branches',
      '',
      `      - ${client}_releases:`,
      '          <<: *requires_image',
      '          <<: *only_releases',
      '',
      `      - ${client}_staging:`,
      '          <<: *requires_image',
      '          <<: *only_staging',
    ]
    if (client !== 'rtv') {
      workflows = [
        ...workflows,
        '',
        `      - ${client}_master:`,
        '          <<: *requires_image',
        '          <<: *only_master',
      ]
    }
    return workflows
  }, []).join('\n')
}


const aliases = fs.readFileSync(path.resolve(__dirname, './aliases.yml'), 'utf8')
const workflows = fs.readFileSync(path.resolve(__dirname, './workflows.yml'), 'utf8')

const generatedLines = [
  aliases,`
  - &only_staging
    filters:
      branches:
        only:
          staging

  - &run_staging
    steps:
      - run:
          name: Build, Test & Deploy Staging
          command: |
            node scripts/buildAndUnitTests.js staging
            node scripts/deployToNetlify.js

  - &only_master
    filters:
      branches:
        only:
          master

  - &run_master
    run:
      name: Build, Test & Deploy Master
      command: |
        node scripts/buildAndUnitTests.js production
        node scripts/integrationTests.js
        node scripts/deployToNetlifyProduction.js

  `,
  'version: 2.1',
  'jobs:',
  generateClientJobs(),
  workflows,
  generateClientWorkflows(),
]

fs.writeFileSync(
  path.resolve(__dirname, '../../.circleci/config.yml'),
  commentBlock + generatedLines.join('\n'),
)

