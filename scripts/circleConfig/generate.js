/*
to run:
      node ./scripts/circleConfig/generate.js
*/

const path = require('path')
const fs = require('fs')



const commentBlock = `#\n#
#  DO NOT EDIT THIS FILE - IT IS GENERATED FROM ./scripts/circleConfig/generate.js\n#\n#
#  ANY EDIT'S WILL BE OVER WRITTEN IF/WHEN REGENERATED\n#\n#
#  DO NOT EDIT THIS FILE - IT IS GENERATED FROM ./scripts/circleConfig/generate.js\n#\n\n
`

const clientList = ['ae', 'demo']

const injectCircleCiEnvVariables = (client) => {
  const clientName = client.toUpperCase()
  return [
    'EMAIL_ADDRESS',
    'PASSWORD',
    'API_KEY',
    'OKTA_USERNAME',
    'OKTA_PASSWORD',
  ].map((varName) => [
    `      - run:`,
    `          name: Create Cypress Env - ${varName}`,
    `          command: echo "export CYPRESS_${varName}=$${clientName}_${varName}" >> $BASH_ENV`,
  ].join('\n'))
}

const generateClientJobs = () => {
  return clientList.reduce((acc, client) => {
    return [
      ...acc,
      `  ${client}_all_branches:`,
      '    <<: *docker_image',
      '    <<: *run_unit_tests',
      '',
      `  ${client}_releases:`,
      '    <<: *docker_image',
      '    steps:',
      ...injectCircleCiEnvVariables(client),
      '      - <<: *run_complete_tests',
      '',
    ]
  }, []).join('\n')
}

const generateClientWorkflows = () => {
  return clientList.reduce((acc, client) => {
    return [
      ...acc,
      '',
      `      - ${client}_all_branches:`,
      '          <<: *requires_image',
      '          <<: *all_branches',
      '',
      `      - ${client}_releases:`,
      '          <<: *requires_image',
      '          <<: *only_releases',
    ]
  }, []).join('\n')
}


const aliases = fs.readFileSync(path.resolve(__dirname, './aliases.yml'), 'utf8')
const workflows = fs.readFileSync(path.resolve(__dirname, './workflows.yml'), 'utf8')

const generatedLines = [
  aliases,
  'version: 2.1',
  'jobs:',
  generateClientJobs(),
  workflows,
  generateClientWorkflows(),
]

fs.writeFileSync(
  path.resolve(__dirname, '../../.circleci/config.yml'),
  commentBlock + generatedLines.join('\n'),
)

